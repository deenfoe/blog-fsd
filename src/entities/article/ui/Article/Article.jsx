import React, { useState } from 'react'
import { Link, useNavigate, useParams } from 'react-router-dom'
import Markdown from 'markdown-to-jsx'
import { useDispatch, useSelector } from 'react-redux'
import { Popover, Button, Popconfirm } from 'antd'
import { HeartOutlined, HeartFilled, QuestionCircleOutlined, ExclamationCircleOutlined } from '@ant-design/icons'

import {
  fetchDeleteArticle,
  fetchFavoriteArticle,
  fetchUnFavoriteArticle,
  resetSuccess,
} from '../../model/articlesSlice'
import { selectUser } from '../../../../features/auth/model/authFormSlice'
import defaultImg from '../../../../assets/images/default-image.svg'
import formatMarkdownSeparators from '../../../../shared/utils/formatMarkdownSeparators'
import dateFormatter from '../../../../shared/utils/dateFormatter'
import useArticleFormatting from '../../../../shared/hooks/useArticleFormatting'
import { showSuccessToast } from '../../../../shared/utils/toastify'

import styles from './Article.module.scss'

function Article({ article, variant }) {
  const { slug } = useParams()
  const dispatch = useDispatch()
  const navigate = useNavigate()
  const [popoverOpen, setPopoverOpen] = useState(false)

  const isFullArticle = variant === 'full'

  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ –≤ —Ç–µ–ª–µ —Å—Ç–∞—Ç—å–∏
  const formattedBody = formatMarkdownSeparators(article.body)

  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è Redux
  const currentUser = useSelector(selectUser)

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–æ–º —Å—Ç–∞—Ç—å–∏
  const isAuthor = currentUser && currentUser.username === article.author.username

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—å–∏
  const handleDeleteArticle = async () => {
    dispatch(resetSuccess())
    await dispatch(fetchDeleteArticle(slug))
    showSuccessToast('ü¶Ñ –°—Ç–∞—Ç—å—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞')
    navigate('/')
  }

  const handleFavorite = (event) => {
    event.preventDefault() // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å—Å—ã–ª–∫–µ
    event.stopPropagation() // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–ø–ª—ã—Ç–∏–µ —Å–æ–±—ã—Ç–∏—è

    if (currentUser) {
      dispatch(fetchFavoriteArticle(article.slug))
    } else {
      setPopoverOpen(true)
      setTimeout(() => setPopoverOpen(false), 3000) // –°–∫—Ä—ã—Ç—å Popover —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    }
  }

  const handleUnFavorite = (event) => {
    event.preventDefault() // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å—Å—ã–ª–∫–µ
    event.stopPropagation() // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–ø–ª—ã—Ç–∏–µ —Å–æ–±—ã—Ç–∏—è

    dispatch(fetchUnFavoriteArticle(article.slug))
  }

  const { truncatedTitle, truncatedDescription, truncatedTagList } = useArticleFormatting(article, isFullArticle)

  const articleContent = (
    <div className={`${styles.article} ${isFullArticle ? styles.full : styles.list}`}>
      <div className={styles.articleHeaderWrap}>
        <div className={styles.articleInfo}>
          <div className={styles.articleInfoHeader}>
            <h1 className={styles.articleInfoTitle}>{truncatedTitle}</h1>

            <Popover
              content={
                <span className={styles.articleInfoError}>
                  <ExclamationCircleOutlined />
                  –í–æ–π–¥–∏—Ç–µ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç—É —Å—Ç–∞—Ç—å—é –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ.
                </span>
              }
              trigger="click"
              open={popoverOpen}
              onOpenChange={(open) => !open && setPopoverOpen(false)} // –°–∫—Ä—ã–≤–∞—Ç—å Popover –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
            >
              <div
                className={styles.articleInfoFavorite}
                role="button" // –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–ª—å "button"
                tabIndex={0} // –î–µ–ª–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç —Ñ–æ–∫—É—Å–∏—Ä—É–µ–º—ã–º
                onClick={article.favorited ? handleUnFavorite : handleFavorite}
                onKeyDown={(event) => {
                  if (event.key === 'Enter' || event.key === ' ') {
                    event.preventDefault() // –ß—Ç–æ–±—ã –ø—Ä–æ–±–µ–ª –Ω–µ –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–ª —Å—Ç—Ä–∞–Ω–∏—Ü—É
                    if (article.favorited) {
                      handleUnFavorite(event)
                    } else {
                      handleFavorite(event)
                    }
                  }
                }}
              >
                {article.favorited ? <HeartFilled style={{ color: 'red' }} /> : <HeartOutlined />}
                <span>{article.favoritesCount}</span>
              </div>
            </Popover>
          </div>

          <div className={styles.articleInfoTags}>
            {truncatedTagList.map((tag, index) => (
              <span key={index}>{tag}</span>
            ))}
          </div>
          <p className={styles.articleInfoDesc}>{truncatedDescription}</p>
        </div>

        <div className={styles.articleAuthorWrap}>
          <div className={styles.articleAuthor}>
            <div>
              <p className={styles.articleAuthorName}>{article.author.username}</p>
              <p className={styles.articleAuthorDate}>{dateFormatter(article.createdAt)}</p>
            </div>
            <img className={styles.img} src={article.author.image || defaultImg} alt={article.author.username} />
          </div>

          {isFullArticle && isAuthor && (
            <div className={styles.articleAuthorButtons}>
              <Popconfirm
                className={styles.deleteBtn}
                onConfirm={handleDeleteArticle}
                placement="bottomRight"
                description="–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É —Å—Ç–∞—Ç—å—é?"
                okText="–î–∞"
                cancelText="–ù–µ—Ç"
                icon={<QuestionCircleOutlined style={{ color: 'red' }} />}
              >
                <Button
                  danger
                  style={{
                    color: '#f5222d',
                    borderColor: '#f5222d',
                  }}
                  onMouseEnter={(e) => {
                    e.currentTarget.style.backgroundColor = '#f5222d'
                    e.currentTarget.style.color = '#fff'
                  }}
                  onMouseLeave={(e) => {
                    e.currentTarget.style.backgroundColor = ''
                    e.currentTarget.style.color = '#f5222d'
                  }}
                >
                  Delete
                </Button>
              </Popconfirm>

              <Link to="edit">
                <button type="button" className={styles.editBtn}>
                  Edit
                </button>
              </Link>
            </div>
          )}
        </div>
      </div>

      {isFullArticle && (
        <div className={styles.articleBody}>
          <Markdown>{formattedBody}</Markdown>
        </div>
      )}
    </div>
  )

  return isFullArticle ? articleContent : <Link to={`/articles/${article.slug}`}>{articleContent}</Link>
}

export default Article

// return ( // reutrn –¥–æ–±–∞–≤–ª–µ–Ω —á—Ç–æ –±—ã —É–±—Ä–∞—Ç—å –æ—à–∏–±–∫—É, –Ω–æ –æ–Ω –Ω–µ –Ω—É–∂–µ–Ω.
//   <Popover
//     content={
//       <span className={styles.articleInfoError}>
//         <ExclamationCircleOutlined />
//         –í–æ–π–¥–∏—Ç–µ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç—É —Å—Ç–∞—Ç—å—é –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ.
//       </span>
//     }
//     trigger="click"
//     open={popoverOpen}
//     onOpenChange={(open) => !open && setPopoverOpen(false)} // –°–∫—Ä—ã–≤–∞—Ç—å Popover –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
//   >
//     <div className={styles.articleInfoFavorite} onClick={article.favorited ? handleUnFavorite : handleFavorite}>
//       {article.favorited ? <HeartFilled style={{ color: 'red' }} /> : <HeartOutlined />}
//       <span>{article.favoritesCount}</span>
//     </div>
//   </Popover>
// )
