import { useForm } from 'react-hook-form'
import { yupResolver } from '@hookform/resolvers/yup'
import * as yup from 'yup'
import { useRef, useState } from 'react'
import { useDispatch } from 'react-redux'
import { Link, useNavigate } from 'react-router-dom'
import { RollbackOutlined } from '@ant-design/icons'

import { fetchCreateArticle, fetchUpdateArticle } from '../../model/articlesSlice'
import { showErrorToast, showSuccessToast } from '../../../../shared/utils/toastify'

import styles from './ArticleForm.module.scss'

const schema = yup.object().shape({
  title: yup.string().required('–ü–æ–ª–µ Title —è–≤–ª—è–µ—Ç—Å—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º.'),
  description: yup.string().required('–ü–æ–ª–µ Short description —è–≤–ª—è–µ—Ç—Å—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º.'),
  body: yup.string().required('–ü–æ–ª–µ Text —è–≤–ª—è–µ—Ç—Å—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º.'),
})

function ArticleForm({ title, initialData = {}, isEdit = false }) {
  const {
    register,
    handleSubmit,
    formState: { errors, isValid },
  } = useForm({
    resolver: yupResolver(schema),
    mode: 'onTouched',
    defaultValues: {
      title: initialData.title || '',
      description: initialData.description || '',
      body: initialData.body || '',
    },
  })

  const { slug } = initialData
  const dispatch = useDispatch()
  const navigate = useNavigate()
  const tagInputRef = useRef(null) // –°–æ–∑–¥–∞–µ–º —Ä–µ—Ñ –¥–ª—è –ø–æ–ª—è –≤–≤–æ–¥–∞ —Ç–µ–≥–∞
  const [newTag, setNewTag] = useState('')
  const [formData, setFormData] = useState({
    title: initialData.title || '',
    description: initialData.description || '',
    body: initialData.body || '',
    tagList: initialData.tagList || [],
  })

  // Tags
  const handleTagChange = (e) => {
    setNewTag(e.target.value)
  }

  const addTag = (e) => {
    e.preventDefault()
    if (newTag.trim() !== '') {
      setFormData({
        ...formData,
        tagList: [...formData.tagList, newTag.trim()],
      })
      setNewTag('') // –æ—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ–≥–∞
      tagInputRef.current.focus()
    }
  }

  const removeTag = (indexToRemove) => {
    setFormData({
      ...formData,
      tagList: formData.tagList.filter((_, index) => index !== indexToRemove),
    })
    tagInputRef.current.focus()
  }

  const removeLastTag = (e) => {
    e.preventDefault()
    if (formData.tagList.length > 0) {
      setFormData({
        ...formData,
        tagList: formData.tagList.slice(0, -1), // —É–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–µ–≥
      })
    }
    tagInputRef.current.focus()
  }

  const handleInputChange = (e) => {
    const { name, value } = e.target
    setFormData({
      ...formData,
      [name]: value,
    })
  }

  const submitForm = async (userData) => {
    const article = {
      ...userData,
      tagList: formData.tagList,
    }
    try {
      if (isEdit) {
        // const { slug } = initialData // slug –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–µ–¥–∞–Ω –≤ initialData
        await dispatch(fetchUpdateArticle({ slug, articleData: article })).unwrap()
      } else {
        await dispatch(fetchCreateArticle(article)).unwrap()
      }
      showSuccessToast(isEdit ? 'ü¶Ñ –°—Ç–∞—Ç—å—è —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞' : 'ü¶Ñ –°—Ç–∞—Ç—å—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞')
      navigate('/') // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è
    } catch (error) {
      showErrorToast(`–û—à–∏–±–∫–∞ ${error} –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ä–º—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.`)
    }
  }

  return (
    <div className={styles.articleFormContainer}>
      <h2 className={styles.articleFormTitle}>{title}</h2>
      <form className={styles.articleForm} onSubmit={handleSubmit(submitForm)}>
        <label className={styles.articleFormLabel}>
          Title
          <input
            className={styles.articleFormInput}
            type="text"
            placeholder="Title"
            {...register('title')}
            value={formData.title}
            onChange={handleInputChange}
          />
          <p className={styles.errorText}>{errors.title?.message}</p>
        </label>

        <label className={styles.articleFormLabel}>
          Short description
          <input
            className={styles.articleFormInput}
            type="text"
            placeholder="Short description"
            {...register('description')}
            value={formData.description}
            onChange={handleInputChange}
          />
          <p className={styles.errorText}>{errors.description?.message}</p>
        </label>

        <label className={styles.articleFormLabel}>
          Text
          <textarea
            className={styles.articleFormTextarea}
            type="text"
            placeholder="Write your article here..."
            {...register('body')}
            value={formData.body}
            onChange={handleInputChange}
          />
          <p className={styles.errorText}>{errors.body?.message}</p>
        </label>

        <label className={styles.articleFormLabel}>
          Tags
          {formData.tagList.map((tag, index) => (
            <div key={index} className={styles.articleFormTags}>
              <input
                className={styles.articleFormInput}
                type="text"
                value={tag}
                readOnly
                // onClick={() => removeTag(index)} // –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ —Ç–µ–≥
              />
              <button className={styles.deleteBtn} type="button" onClick={() => removeTag(index)}>
                Delete
              </button>
            </div>
          ))}
          <div className={styles.articleFormTags}>
            <input
              ref={tagInputRef}
              className={styles.articleFormInput}
              type="text"
              placeholder="Add a tag"
              value={newTag}
              onChange={handleTagChange}
            />
            <button className={styles.deleteBtn} onClick={removeLastTag} type="button">
              Delete
            </button>
            <button className={styles.addBtn} onClick={addTag}>
              Add tag
            </button>
          </div>
        </label>

        <div className={styles.articleFormButtonWrap}>
          <button className={styles.articleFormButton} type="submit" disabled={!isValid}>
            Send
          </button>

          {isEdit && (
            <Link to={`/articles/${slug}`}>
              <RollbackOutlined style={{ color: '#1890FF', scale: '2 ' }} />
            </Link>
          )}
        </div>
      </form>
    </div>
  )
}

export default ArticleForm
